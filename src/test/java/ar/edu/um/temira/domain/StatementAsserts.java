package ar.edu.um.temira.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class StatementAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAllPropertiesEquals(Statement expected, Statement actual) {
        assertStatementAutoGeneratedPropertiesEquals(expected, actual);
        assertStatementAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAllUpdatablePropertiesEquals(Statement expected, Statement actual) {
        assertStatementUpdatableFieldsEquals(expected, actual);
        assertStatementUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementAutoGeneratedPropertiesEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementUpdatableFieldsEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement relevant properties")
            .satisfies(e -> assertThat(e.getDateCreation()).as("check dateCreation").isEqualTo(actual.getDateCreation()))
            .satisfies(e -> assertThat(e.getDestination()).as("check destination").isEqualTo(actual.getDestination()))
            .satisfies(e -> assertThat(e.getPathCsv()).as("check pathCsv").isEqualTo(actual.getPathCsv()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertStatementUpdatableRelationshipsEquals(Statement expected, Statement actual) {
        assertThat(expected)
            .as("Verify Statement relationships")
            .satisfies(e -> assertThat(e.getSleepDetector()).as("check sleepDetector").isEqualTo(actual.getSleepDetector()))
            .satisfies(e -> assertThat(e.getVehicle()).as("check vehicle").isEqualTo(actual.getVehicle()))
            .satisfies(e -> assertThat(e.getDriver()).as("check driver").isEqualTo(actual.getDriver()));
    }
}
